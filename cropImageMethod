  /**
     * @description: 传入base64图片，返回裁剪后的base64图片
     * 调用方法：cropImage(url).then(res => {console.log(res)});
     * @param {string} base64
     * @return {string} base64
     */
    function cropImage(base64: string) {
        return new Promise((resolve, reject) => {
            const img = new Image();
            img.src = base64;
            img.onload = () => {
                const c = document.createElement('canvas');
                console.log(c, 3333);

                const ctx = c.getContext('2d');
                c.width = img.width;
                c.height = img.height;
                ctx!.drawImage(img, 0, 0);
                const imgData = ctx!.getImageData(0, 0, c.width, c.height).data;
                let lOffset = c.width,
                    rOffset = 0,
                    tOffset = c.height,
                    bOffset = 0;

                for (let i = 0; i < c.width; i++) {
                    for (let j = 0; j < c.height; j++) {
 /**
                         * 在给定的上下文中，const pos = (i + c.width * j) * 4; 是一个用于计算图像像素位置的表达式。让我详细解释一下它的含义。
在图像处理中，图像数据通常以像素的形式表示。每个像素由一组颜色值组成，例如红色、绿色和蓝色（RGB）通道。在这种情况下，每个像素由四个值组成，分别是红色、绿色、蓝色和透明度（RGBA）。每个颜色通道的值通常是介于0和255之间的整数。
表达式 (i + c.width * j) * 4 用于计算图像中特定像素的索引位置。这里的变量含义如下：
i 表示像素在水平方向上的索引（列数）。
j 表示像素在垂直方向上的索引（行数）。
c.width 表示图像的宽度，即水平方向上的像素数。
现在，让我们逐步解释这个表达式：
c.width * j：这部分计算用于确定像素在垂直方向上的偏移量。乘法 c.width * j 表示每行像素的总数，即图像宽度乘以当前行数 j。这样就可以确定像素在垂直方向上的位置。
(i + c.width * j)：这部分计算用于确定像素在水平方向上的偏移量。加法 i + c.width * j 表示当前列数 i 加上垂直方向上的偏移量。这样就可以确定像素在水平方向上的位置。
(i + c.width * j) * 4：最后乘以4是因为每个像素由四个值组成（RGBA），所以乘以4可以得到正确的索引位置。乘法 4 * (i + c.width * j) 表示每个像素占据4个位置。
因此，表达式 (i + c.width * j) * 4 可以计算出图像中特定像素的索引位置，以便进行像素级的操作，例如修改颜色值或获取像素的信息。
注意：在这个表达式中，假设图像数据是以一维数组的形式存储的，每个像素占据四个连续的位置，依次是红色、绿色、蓝色和透明度。这是一种常见的图像数据排列方式，但并不是唯一的方式，具体取决于图像数据的格式和存储方式。
                         */
                        const pos = (i + c.width * j) * 4;
                        if (
                            imgData[pos] === 255 ||
                            imgData[pos + 1] === 255 ||
                            imgData[pos + 2] === 255 ||
                            imgData[pos + 3] === 255
                        ) {
                            bOffset = Math.max(j, bOffset);
                            rOffset = Math.max(i, rOffset);
                            tOffset = Math.min(j, tOffset);
                            lOffset = Math.min(i, lOffset);
                        }
                    }
                }

                lOffset++;
                rOffset++;
                tOffset++;
                bOffset++;

                const canvas = document.createElement('canvas');
                canvas.width = rOffset - lOffset;
                canvas.height = bOffset - tOffset;
                const ctx2 = canvas.getContext('2d');
                ctx2!.drawImage(
                    img,
                    lOffset,
                    tOffset,
                    canvas.width,
                    canvas.height,
                    0,
                    0,
                    canvas.width,
                    canvas.height
                );

                resolve(canvas.toDataURL());
            };

            img.onerror = reject;
        });
    }
